import{_ as a,c as i,o as e,ag as t}from"./chunks/framework.DPDPlp3K.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/custom_rules.md","filePath":"guide/custom_rules.md"}'),n={name:"guide/custom_rules.md"};function l(p,s,o,r,h,c){return e(),i("div",null,s[0]||(s[0]=[t(`<blockquote><p>配置规则的主要目的是为了将流量进行分流，以达到直连加快访问、节省机场流量、强制使用代理等目的。可大致将分流归为两类：前置分流、后置分流。</p></blockquote><blockquote><p>前置分流：请求还未发出，决定请求流量是否流向本机的代理程序。</p></blockquote><blockquote><p>后置分流：请求流量已经抵达了本机的代理程序，决定这部分流量应该流向哪里。</p></blockquote><blockquote><p>流量流向大致如下图所示，请根据自身情况，选择适合自己的分流方式（阶段）、编写恰当的分流规则。</p></blockquote><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  A{&quot;网络请求程序&quot;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  P((&quot;本机代理程序&quot;))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  S[&quot;系统代理&quot;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SD[&quot;系统代理（默认模式）&quot;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SP[&quot;系统代理（PAC模式）&quot;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  D[&quot;本地网络&quot;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  O[&quot;代理网络&quot;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  T([&quot;目标地址&quot;])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  TUN[&quot;TUN（虚拟网卡）&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  A --&gt;|遵循系统代理| S</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  A --&gt;|不遵循系统代理| TUN --&gt;|路由重定向| P</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  S --&gt; SD --&gt; P</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  S --&gt; SP</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SP --&gt;|前置分流，走直连| D</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SP --&gt;|前置分流，走代理| P</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  P --&gt;|后置分流，走直连| D</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  P --&gt;|后置分流，走代理| O</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  D -.-&gt; T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  O -.-&gt; T</span></span></code></pre></div><h2 id="前置分流" tabindex="-1">前置分流 <a class="header-anchor" href="#前置分流" aria-label="Permalink to &quot;前置分流&quot;">​</a></h2><blockquote><p>前置分流的作用范围主要是系统代理，这要求进行网络请求的程序<strong>必须遵循系统代理</strong>（如浏览器请求、各种 IDE 程序内置代理配置）。</p></blockquote><p>!!! tip 该分流方式的适用面较窄，通常用于简单场景。</p><p>假设：</p><ol><li>程序启用了 <code>系统代理</code> 模式，并在本地的 <code>127.0.0.1:7897</code> 监听。</li><li>经过考量后，决定将 <code>www.example.com</code> 的流量不要经过代理程序，直接本地网络出去。</li></ol><h3 id="方法一-系统代理-pac-模式" tabindex="-1">方法一：系统代理 PAC 模式 <a class="header-anchor" href="#方法一-系统代理-pac-模式" aria-label="Permalink to &quot;方法一：系统代理 PAC 模式&quot;">​</a></h3><blockquote><p>系统代理有两种工作模式：默认模式、PAC 模式。其中，PAC 模式会在本地启动一个 http 文件服务，用于提供一个 javascript 脚本文件。浏览器会访问该服务，下载并解析这份按照规定格式编写的脚本代码，便明白了流量应该流向哪里。</p></blockquote><ol><li><p>启用 PAC 模式。</p></li><li><p>编写 PAC 脚本。</p></li></ol><p>有待完善</p><h3 id="方法二-浏览器插件" tabindex="-1">方法二：浏览器插件 <a class="header-anchor" href="#方法二-浏览器插件" aria-label="Permalink to &quot;方法二：浏览器插件&quot;">​</a></h3><p>有待完善</p><h2 id="后置分流" tabindex="-1">后置分流 <a class="header-anchor" href="#后置分流" aria-label="Permalink to &quot;后置分流&quot;">​</a></h2><blockquote><p>后置分流说明请求流量已经抵达了本地代理程序，通过配置代理程序的分流规则，决定流量流向哪里。</p></blockquote><p>!!! warning 代理程序分流要求内核运行在 <code>规则模式</code>，不同模式的区别详见<a href="./term.html#_1">规则/ 全局 / 直连模式</a>。</p><h3 id="入门-分流规则" tabindex="-1">入门：分流规则 <a class="header-anchor" href="#入门-分流规则" aria-label="Permalink to &quot;入门：分流规则&quot;">​</a></h3><blockquote><p>订阅文件提供的分流配置有时并不完全满足自己的需求。这时可以自行配置分流规则。</p></blockquote><p>有待完善</p><h3 id="进阶一-内置规则集-geosite、geoip" tabindex="-1">进阶一：内置规则集（GEOSITE、GEOIP） <a class="header-anchor" href="#进阶一-内置规则集-geosite、geoip" aria-label="Permalink to &quot;进阶一：内置规则集（GEOSITE、GEOIP）&quot;">​</a></h3><blockquote><p>一条条按照域名添加效率并不高。这时可以使用内核内置的域名/站点数据，批量进行配置。</p></blockquote><p>有待完善</p><h3 id="进阶二-外部规则集-rule-providers" tabindex="-1">进阶二：外部规则集（rule-providers） <a class="header-anchor" href="#进阶二-外部规则集-rule-providers" aria-label="Permalink to &quot;进阶二：外部规则集（rule-providers）&quot;">​</a></h3><blockquote><p>一个人的力量终究是有限的，编写的规则也可能并不完备。这时可以使用别人已经维护好的规则集，省时又省力。</p></blockquote><p>有待完善</p><div class="tip custom-block"><p class="custom-block-title">🎉 节点推荐</p><p>🚀 <a href="https://www.xn--9kqrm7t.com/#/register?code=JRtE5uIV" target="_blank" rel="noreferrer">优信云</a>：IEPL/IPLC 高速专线，￥15.00/月</p></div>`,29)]))}const d=a(n,[["render",l]]);export{E as __pageData,d as default};
